name: UPSTATE TECH DEVSECOPS PIPELINE

on:
  push:
    branches:
      - sandbox
      - production
  repository_dispatch:
    types: [deploy-production]

env:
  TERRAFORM_ROOT: "./terraform"
  NODE_VERSION: 18.x
  DOCKER_ENV: ${{github.ref == 'refs/heads/production' && 'production' || 'sandbox'}}
  DOMAIN_TLD: ${{github.ref == 'refs/head/production' && 'com' || 'dev'}}
  AWS_ACCESS_KEY_ID: ${{secrets.TF_VAR_aws_access_key}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.TF_VAR_aws_secret_key}}
  AWS_REGION: "us-east-1"
  AWS_DEFAULT_REGION: "us-east-1"
  PERSONAL_ACCESS_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}
  TF_VAR_docker_image_tag: ${{github.sha}}
  ACTIONS_ROLE_ARN: ${{secrets.ACTIONS_ROLE_ARN}}

jobs:
  build:
    name: Build Terraform Files
    runs-on: ubuntu-latest
    environment: ${{github.ref == 'refs/heads/production' && 'production' || 'sandbox'}}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.AWS_REGION}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.8
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{env.TERRAFORM_ROOT}}
      
      - name: Check something quick
        id: check
        run: echo ${{env.TF_VAR_actions_role_arn}}

      - name: Select Terraform Workspace
        run: terraform workspace select ${{env.DOCKER_ENV}} || terraform workspace new ${{env.DOCKER_ENV}}
        working-directory: ${{env.TERRAFORM_ROOT}} 

      - name: Terraform Plan
        id: plan
        working-directory: ${{env.TERRAFORM_ROOT}}
        run: |
          terraform plan -out ./app.out
        env:
          AWS_ACCESS_KEY_ID: ${{env.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{env.AWS_SECRET_ACCESS_KEY}}
          TF_VAR_aws_region: ${{env.AWS_REGION}}
          TF_VAR_site_domain: upstate-tech.${{env.DOMAIN_TLD}}
          TF_VAR_aws_access_key: ${{env.TF_VAR_aws_access_key}}
          TF_VAR_aws_secret_key: ${{env.TF_VAR_aws_secret_key}}
          TF_VAR_actions_role_arn: ${{secrets.ACTIONS_ROLE_ARN}}

      - name: Terraform apply
        id: apply
        working-directory: ${{env.TERRAFORM_ROOT}}
        run: terraform apply -auto-approve ./app.out
        env:
          AWS_ACCESS_KEY_ID: ${{env.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{env.AWS_SECRET_ACCESS_KEY}}
          TF_VAR_aws_region: ${{env.AWS_REGION}}
          TF_VAR_site_domain: upstate-tech.${{env.DOMAIN_TLD}}
          TF_VAR_aws_access_key: ${{env.TF_VAR_aws_access_key}}
          TF_VAR_aws_secret_key: ${{env.TF_VAR_aws_secret_key}}
          TF_VAR_actions_role_arn: ${{secrets.ACTIONS_ROLE_ARN}}
    
  deploy-static-site: 
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{env.DOCKER_ENV}}
          fetch-depth: 0 
          token: ${{env.PERSONAL_ACCESS_TOKEN}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{secrets.TF_VAR_aws_access_key}}
          aws-secret-access-key:  ${{secrets.TF_VAR_aws_secret_key}}
          aws-region: "us-east-1"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
      
      - name: Install Dependencies
        run: npm install
        working-directory: ./terraform/static_site

      - name: Build Next.js Site
        run: npm run build
        working-directory: ./terraform/static_site

      - name: Deploy Static Files to S3
        run: aws s3 sync ./terraform/static_site/out/ s3://upstate-tech.${{env.DOMAIN_TLD}} --delete

  promote-to-production:
    runs-on: ubuntu-latest
    needs: deploy-static-site
    if: success() && github.ref == 'refs/heads/sandbox'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.DOCKER_ENV}}
          fetch-depth: 1
          token: ${{env.PERSONAL_ACCESS_TOKEN}}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create or pull production
        run: |
          git pull origin production
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  
      - name: Merge sandbox into production
        run: |
          git checkout production
          git merge sandbox --no-edit
          git push origin production
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    

      # - name: Merge sandbox into production
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       const { repo, owner } = context.repo;
      #       const result = await github.rest.pulls.create({
      #         title: 'Automatic merge to production from Github Actions',
      #         owner,
      #         repo,
      #         head: '${{github.ref_name}}',
      #         base: 'develop',
      #         body: [
      #           'This PR is auto-generated by',
      #           '[actions/github-script](https://github.com/actions/github-script).'
      #         ].join('\n')
      #       });
      #       github.rest.issues.addLabels({
      #         owner,
      #         repo,
      #         issue_number: result.data.number,
      #         labels: ['feature', 'automated pr']
      #       });