name: UPSTATE TECH DEVSECOPS PIPELINE

on:
  push:
    branches:
      - sandbox
      - production
  repository_dispatch:
    types: [deploy-production]

env:
  TERRAFORM_ROOT: "./terraform"
  NODE_VERSION: 18.x
  TF_ENV: ${{github.ref == 'refs/heads/production' && 'production' || 'sandbox'}}
  DOMAIN_TLD: ${{github.ref == 'refs/head/production' && 'com' || 'dev'}}
  AWS_REGION: "us-east-1"
  AWS_ACCESS_KEY_ID: ${{ secrets.TF_VAR_aws_access_key }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_VAR_aws_secret_key }}

jobs:
  build:
    name: Build Terraform Files
    runs-on: ubuntu-latest
    environment: ${{github.ref == 'refs/heads/production' && 'production' || 'sandbox'}}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.TF_ENV}}
          fetch-depth: 0 
          token: ${{ github.token }}

      - uses: hashicorp/setup-terraform@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{secrets.TF_VAR_aws_account_id}}:role/GitHubAction-AssumeRoleWithAction
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set Environment Variable
        run: echo "TF_ENV=${{env.TF_ENV}}" >> $GITHUB_ENV
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -var="environment=${{ env.TF_ENV }}"
        working-directory: ${{env.TERRAFORM_ROOT}}

      - name: Select Terraform Workspace
        run: terraform workspace select -or-create ${{env.TF_ENV}}
        working-directory: ${{env.TERRAFORM_ROOT}} 

      - name: Terraform apply
        id: apply
        working-directory: ${{env.TERRAFORM_ROOT}}
        run: terraform apply -auto-approve
        env:
          TF_VAR_aws_access_key: ${{secrets.TF_VAR_aws_access_key}}
          TF_VAR_aws_secret_key: ${{secrets.TF_VAR_aws_secret_key}}
          TF_VAR_aws_region: ${{env.AWS_REGION}}
          TF_VAR_site_domain: upstate-tech.${{env.DOMAIN_TLD}}
  #
  deploy-static-site: 
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.TF_ENV}}
          fetch-depth: 0 
          token: ${{ github.token }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{secrets.TF_VAR_aws_account_id}}:role/GitHubAction-AssumeRoleWithAction
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
      
      - name: Install Dependencies
        run: npm install
        working-directory: ./terraform/static_site

      - name: Build Next.js Site
        run: npm run build
        working-directory: ./terraform/static_site

      - name: Deploy Static Files to S3
        run: aws s3 sync ./terraform/static_site/out/ s3://upstate-tech.${{env.DOMAIN_TLD}} --delete

  promote-to-production:
    runs-on: ubuntu-latest
    needs: deploy-static-site
    if: success() && github.ref == 'refs/heads/sandbox'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.TF_ENV}}
          fetch-depth: 0 
          token: ${{ github.token }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create or pull production
        run: |
          git pull origin production
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  
      - name: Merge sandbox into production
        run: |
          git checkout production
          git merge sandbox --no-edit
          git push origin production
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}