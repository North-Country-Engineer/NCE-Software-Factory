name: UPSTATE TECH DEVSECOPS PIPELINE

on:
  push:
    branches:
      - sandbox
      - production
  repository_dispatch:
    types: [deploy-production]

env:
  TERRAFORM_ROOT: "./terraform"
  NODE_VERSION: 18.x
  TF_ENV: ${{github.ref == 'refs/heads/production' && 'production' || 'sandbox'}}
  DOMAIN_TLD: ${{github.ref == 'refs/head/production' && 'com' || 'dev'}}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: "us-east-1"
  AWS_ACCESS_KEY_ID: ${{ secrets.TF_VAR_aws_access_key }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_VAR_aws_secret_key }}
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.TF_VAR_cloudflare_api_token }}
  CLOUDFLARE_ZONE_ID: ${{ secrets.TF_VAR_cloudflare_zone_id }}
  AWS_COGNITO_REGION: ${{ secrets.AWS_COGNITO_REGION }}
  AWS_COGNITO_POOL_ID: ${{secrets.AWS_COGNITO_POOL_ID }}
  AWS_COGNITO_APP_CLIENT_ID: ${{ secrets.AWS_COGNITO_APP_CLIENT_ID }}
  CLOUDFLARE_EMAIL: "eric@northcountryengineer.com"

jobs:
  build:
    name: Build Terraform Files
    runs-on: ubuntu-latest
    environment: ${{github.ref == 'refs/heads/production' && 'production' || 'sandbox'}}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.TF_ENV}}
          fetch-depth: 0 
          token: ${{ github.token }}

      - uses: hashicorp/setup-terraform@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{secrets.TF_VAR_aws_account_id}}:role/GitHubAction-AssumeRoleWithAction
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set Environment Variable
        run: echo "TF_ENV=${{env.TF_ENV}}" >> $GITHUB_ENV
      
      
      - name: Install Dependencies
        run: npm install
        working-directory: ./terraform/static_site

      - name: Build Next.js Site
        run: |
          NEXT_PUBLIC_AWS_COGNITO_REGION=${{ env.AWS_COGNITO_REGION }} \
          NEXT_PUBLIC_AWS_COGNITO_POOL_ID=${{ env.AWS_COGNITO_POOL_ID }} \
          NEXT_PUBLIC_AWS_COGNITO_APP_CLIENT_ID=${{ env.AWS_COGNITO_APP_CLIENT_ID }} \
          npm run build
        working-directory: ./terraform/static_site
        
      - name: Cache next build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -var="environment=${{ env.TF_ENV }}" -upgrade
        working-directory: ${{ env.TERRAFORM_ROOT }}

      - name: Select Terraform Workspace
        run: terraform workspace select -or-create ${{env.TF_ENV}}
        working-directory: ${{ env.TERRAFORM_ROOT }} 

      - name: Terraform apply
        id: apply
        working-directory: ${{env.TERRAFORM_ROOT}}
        run: terraform apply -auto-approve
        env:
          TF_VAR_aws_access_key:              ${{secrets.TF_VAR_aws_access_key}}
          TF_VAR_aws_secret_key:              ${{secrets.TF_VAR_aws_secret_key}}
          TF_VAR_aws_region:                  ${{env.AWS_REGION}}
          TF_VAR_site_domain:                 upstate-tech.${{env.DOMAIN_TLD}}
          TF_VAR_cloudflare_api_token:        ${{ env.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone_id:          ${{ env.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_email:            ${{ env.CLOUDFLARE_EMAIL }}
          TF_VAR_user_pool_name:              ${{ env. USER_POOL_NAME }}
          TF_VAR_user_pool_client:            ${{ env. USER_POOL_CLIENT}}
          TF_VAR_AWS_COGNITO_REGION:          ${{ env.AWS_COGNITO_REGION }}
          TF_VAR_AWS_COGNITO_POOL_ID:         ${{ env.AWS_COGNITO_POOL_ID }}
          TF_VAR_AWS_COGNITO_APP_CLIENT_ID:   ${{ env.AWS_COGNITO_APP_CLIENT_ID }}

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    environment: ${{github.ref == 'refs/heads/production' && 'production' || 'sandbox'}}
    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{env.TF_ENV}}
          fetch-depth: 0 
          token: ${{ github.token }}

      - uses: hashicorp/setup-terraform@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubAction-AssumeRoleWithAction
          aws-region: ${{ env.AWS_REGION }}

      - name: Run Signin Lambda Test Event
        id: lambda-test-signup
        run: |
          aws lambda invoke \
            --function-name auth_function \
            --payload file://terraform/lambda/events/signup_event.json \
            output_signin.json
        working-directory: ${{ env.TERRAFORM_ROOT }}

      - name: Run Signin Lambda Test Event
        id: lambda-test-signin
        run: |
          aws lambda invoke \
            --function-name auth_function \
            --payload file://terraform/lambda/events/signin_event.json \
            output_signin.json
        working-directory: ${{ env.TERRAFORM_ROOT }}

  promote-to-production:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    if: success() && github.ref == 'refs/heads/sandbox'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.TF_ENV}}
          fetch-depth: 0 
          token: ${{ github.token }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
  
      - name: Checkout production branch
        run: git checkout production

      - name: Merge changes from sandbox
        run: git merge sandbox

      - name: Push to production
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/North-Country-Engineer/NCE-Software-Factory.git
          git push origin production