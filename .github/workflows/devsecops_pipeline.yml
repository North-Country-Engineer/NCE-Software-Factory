name: UPSTATE TECH DEVSECOPS PIPELINE

on:
  push:
    branches:
      - sandbox
      - production
  repository_dispatch:
    types: [deploy-production]

env:
  ECR_REPO_NAME: ""
  TF_ENV: ""
  TERRAFORM_ROOT: "./terraform"
  NODE_VERSION: 18
  DOCKER_ENV: ${{ github.ref == 'refs/heads/production' && 'production' || 'sandbox' }}
  DOMAIN_TLD: ${{ github.ref == 'refs/head/production' && 'com' || 'dev'}}
  AWS_ACCESS_KEY_ID: ${{ github.ref == 'refs/heads/production' && secrets.AWS_ACCESS_KEY_ID || secrets.AWS_ACCESS_KEY_ID_SANDBOX }}
  AWS_SECRET_ACCESS_KEY: ${{ github.ref == 'refs/heads/production' && secrets.AWS_SECRET_ACCESS_KEY || secrets.AWS_SECRET_ACCESS_KEY_SANDBOX }}
  AWS_REGION: "us-east-1"
  AWS_DEFAULT_REGION: "us-east-1"
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN}}
  TF_VAR_docker_image_tag: ${{ github.sha }}
  TF_VAR_site_domain: ${{ secrets.SITE_DOMAIN }}
  # TF_VAR_cloudflare_api_token: ${{ secrets.TF_VAR_CLOUDFLARE_API_TOKEN }}
  # TF_VAR_cloudflare_email: ${{ secrets.TF_VAR_CLOUDFLARE_EMAIL }}
  # TF_VAR_zone_id: ${{ secrets.TF_VAR_ZONE_ID }}
  # TF_VAR_account_id: ${{ secrets.TF_VAR_ACCOUNT_ID }}

jobs:
  build:
    name: Build Terraform Files
    #needs: pre-build
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'sandbox' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.8
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_ROOT }}

      - name: Select Terraform Workspace
        run: terraform workspace select ${{ env.DOCKER_ENV }} || terraform workspace new ${{env.DOCKER_ENV}}
        working-directory: ${{ env.TERRAFORM_ROOT }} 

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_ROOT }}
        run: |
          terraform plan -out ./app.out
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_site_domain: ${{ env.TF_VAR_site_domain }}
          # TF_VAR_cloudflare_api_token: ${{ env.TF_VAR_cloudflare_api_token}}
          # TF_VAR_cloudflare_email: ${{ env.TF_VAR_cloudflare_email }}
          # TF_VAR_zone_id: ${{ env.TF_VAR_zone_id }}
          # TF_VAR_account_id: ${{ env.TF_VAR_account_id }}

      - name: Terraform apply
        id: apply
        working-directory: ${{ env.TERRAFORM_ROOT }}
        run: terraform apply -auto-approve ./app.out
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_site_domain: ${{ env.TF_VAR_site_domain }}
          # TF_VAR_cloudflare_api_token: ${{ env.TF_VAR_cloudflare_api_token}}
          # TF_VAR_cloudflare_email: ${{ env.TF_VAR_cloudflare_email }}
          # TF_VAR_zone_id: ${{ env.TF_VAR_zone_id }}
          # TF_VAR_account_id: ${{ env.TF_VAR_account_id }}
    
  deploy-static-files: 
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.DOCKER_ENV}}
          fetch-depth: 0 
          token: ${{ env.PERSONAL_ACCESS_TOKEN }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Deploy static files to S3
        run: aws s3 sync ./terraform/static_site/ s3://upstate-tech.${{env.DOMAIN_TLD}} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"

  promote-to-production:
    runs-on: ubuntu-latest
    needs: deploy-static-files
    if: success() && github.ref == 'refs/heads/sandbox'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{env.DOCKER_ENV}}
          fetch-depth: 1
          token: ${{ env.PERSONAL_ACCESS_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Merge sandbox into production
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Merge sandbox into production',
              head: 'sandbox',
              base: 'production',
              body: 'This pull request merges the changes from the sandbox branch into the production branch.'
            })